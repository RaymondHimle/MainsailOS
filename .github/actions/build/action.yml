name: "MainsailOS/build"
author: "Stefan Dej"
description: "Build MainsailOS images"
inputs:
  config:
    description: "Board config name"
    required: true
  custompios-repository:
    description: "Repository for CustomPiOS"
    required: false
    default: "guysoft/CustomPiOS"
  custompios-ref:
    description: "Branch / Tag / SHA to checkout CustomPiOS"
    required: false
    default: "devel"
outputs:
  type:
    description: SBC type (raspberry/armbian/...)
    value: ${{ steps.config.outputs.TYPE }}
  sbc:
    description: SBC model (rpi32/orangepi4lts/...)
    value: ${{ steps.config.outputs.SBC }}

runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        echo "::group::Install dependencies"
        sudo apt update
        sudo apt install --yes aria2 coreutils jq p7zip-full qemu-user-static zip
        echo "::endgroup::"

    - name: Checkout CustomPiOS
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.custompios-repository }}
        ref: ${{ inputs.custompios-ref }}
        path: CustomPiOS

    - name: Generate board config
      id: config
      shell: bash
      run: |
        echo "::group::Get Matrix"
        IFS='/' read -r -a array <<< "${{ inputs.config }}"
        TYPE="${array[0]}"
        SBC="${array[1]}"
        echo "TYPE=${TYPE}" | tee -a "$GITHUB_OUTPUT"
        echo "SBC=${SBC}" | tee -a "$GITHUB_OUTPUT"
        if [[ "${TYPE}" = "raspberry" ]]; then
          TYPE_CONFIG="rpi-defaults.conf"
        else
          TYPE_CONFIG="${TYPE}-defaults.conf"
        fi
        echo "DEBUG: TYPE_CONFIG=$TYPE_CONFIG"
        BOARD_CONFIG=${SBC}.conf
        echo "DEBUG: BOARD_CONFIG=${SBC}.conf"
        echo "::endgroup::"

        echo "::group::Generate CustomPIOS config file"
        CONFIG_BASE_DIR="./repository/config"
        SBC_CONFIG="${CONFIG_BASE_DIR}/${TYPE}"
        TMP_CONFIG="/tmp/config.tmp"
        DEFAULT_CONF="./repository/config/config-defaults.conf"

        generate_header() {
          echo "#!/bin/bash" >> "${TMP_CONFIG}"
          echo "# shellcheck enable=require-variable-braces" >> "${TMP_CONFIG}"
        }

        concat_helper() {
          local input_file
          input_file="${1}"
          echo "DEBUG: Using input file: ${input_file}"
          if [[ -f "${input_file}" ]]; then
            sed '/^#.*/d; /^$/d' "${input_file}" >> "${TMP_CONFIG}"
          fi
        }

        main() {
          generate_header
          concat_helper "${DEFAULT_CONF}"
          concat_helper "${SBC_CONFIG}/${TYPE_CONFIG}"
          concat_helper "${SBC_CONFIG}/${BOARD_CONFIG}"
          # Write config to debug
          echo "::group::Print config file"
          cat "${TMP_CONFIG}" | sort | uniq
          echo "::endgroup::"
        }

        # MAIN
        main

        # source ./repository/src/config


        echo "DOWNLOAD_URL_CHECKSUM=${DOWNLOAD_URL_CHECKSUM}" >> $GITHUB_OUTPUT
        echo "DOWNLOAD_URL_IMAGE=${DOWNLOAD_URL_IMAGE}" >> $GITHUB_OUTPUT
        echo "MODULES=${MODULES}" >> $GITHUB_OUTPUT

        exit 1

    - name: Base Image Checksum
      id: checksum
      shell: bash
      run: |
        cd repository/src/image
        FILENAME=$(basename ${{ steps.config.outputs.DOWNLOAD_URL_CHECKSUM }})
        wget -O ${FILENAME} ${{ steps.config.outputs.DOWNLOAD_URL_CHECKSUM }}
        FILE_CONTENT=$(head -n 1 $FILENAME)
        CHECKSUM=$(echo $FILE_CONTENT | cut -d' ' -f1)

        echo "CHECKSUM=${CHECKSUM}" >> $GITHUB_OUTPUT
        echo "FILENAME=${FILENAME}" >> $GITHUB_OUTPUT

    - name: Cache Base Source Image
      id: cache
      uses: actions/cache@v4
      with:
        path: repository/src/image/*.img.xz
        key: base-image-${{ steps.checksum.outputs.CHECKSUM }}

    - name: Download Base Source Image via Torrent
      if: steps.cache.outputs.cache-hit != 'true' && endswith(steps.config.outputs.DOWNLOAD_URL_IMAGE, '.torrent')
      shell: bash
      run: aria2c -d repository/src/image --seed-time=0 ${{ steps.config.outputs.DOWNLOAD_URL_IMAGE }}

    - name: Download Base Source Image via wget
      if: steps.cache.outputs.cache-hit != 'true' && !endswith(steps.config.outputs.DOWNLOAD_URL_IMAGE, '.torrent')
      shell: bash
      run: |
        cd repository/src/image
        wget ${{ steps.config.outputs.DOWNLOAD_URL_IMAGE }}

    - name: Comparing Checksums
      shell: bash
      run: |
        cd repository/src/image
        sha256sum -b ${{ steps.checksum.outputs.FILENAME }}

    - name: Update CustomPiOS Paths
      shell: bash
      run: cd repository/src && ../../CustomPiOS/src/update-custompios-paths

    - name: Build Image
      shell: bash
      run: sudo modprobe loop && cd repository/src && sudo bash -x ./build_dist

    - name: Cleanup workspace & fix permissions
      if: success()
      shell: bash
      run: |
        # Clean up workspace
        path="${{ github.workspace }}/repository/src/workspace"
        sudo rm -rfv ${path}/aptcache
        sudo rm -rfv ${path}/mount
        sudo rm -rfv ${path}/chroot_script

        sudo chown -v -R ${USER}:${USER} ${path}
        sudo chmod 0775 -v -R ${path}
