name: "MainsailOS/build"
author: "Stefan Dej"
description: "Build MainsailOS images"
inputs:
  config:
    description: "Board config name"
    required: true
  custompios-repository:
    description: "Repository for CustomPiOS"
    required: false
    default: "guysoft/CustomPiOS"
  custompios-ref:
    description: "Branch / Tag / SHA to checkout CustomPiOS"
    required: false
    default: "devel"
outputs:
  type:
    description: SBC type (raspberry/armbian/...)
    value: ${{ steps.config.outputs.TYPE }}
  sbc:
    description: SBC model (rpi32/orangepi4lts/...)
    value: ${{ steps.config.outputs.SBC }}

runs:
  using: "composite"
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        echo "::group::Install dependencies"
        sudo apt-get update
        sudo apt-get install --yes aria2 coreutils jq p7zip-full qemu-user-static zip
        echo "::endgroup::"

    - name: Checkout CustomPiOS
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.custompios-repository }}
        ref: ${{ inputs.custompios-ref }}
        path: CustomPiOS

    - name: Generate board config
      id: config
      shell: bash
      run: |
        echo "::group::Generate config"
        IFS='/' read -r -a array <<< "${{ inputs.config }}"
        TYPE="${array[0]}"
        SBC="${array[1]}"
        echo "TYPE=${TYPE}" >> $GITHUB_OUTPUT
        echo "SBC=${SBC}" >> $GITHUB_OUTPUT

        CONFIG_BASE_DIR="./repository/config"
        DEFAULT_CONF="${CONFIG_BASE_DIR}/config-defaults.conf"
        TYPE_CONF="${CONFIG_BASE_DIR}/${TYPE}/type-defaults.conf"
        SBC_CONF="${CONFIG_BASE_DIR}/${TYPE}/${SBC}.conf"
        CONFIG_ARRAY=("${DEFAULT_CONF}" "${TYPE_CONF}" "${SBC_CONF}")
        TMP_CONFIG="/tmp/config.tmp"
        CONFIG_PATH="./repository/src/config"
        IMG_SRC_PATH="${PWD}/repository/src/image"


        printf "#!/bin/bash\n" | tee "${TMP_CONFIG}" >/dev/null
        printf "#shellcheck enable=require-variable-braces\n" | tee -a "${TMP_CONFIG}" >/dev/null

        for conf in "${CONFIG_ARRAY[@]}"; do
            if [[ -f "${conf}" ]]; then
                sed '/^$/d; /^#/d' "${conf}" | tee -a "${TMP_CONFIG}" >/dev/null
            else
                echo "File '${conf}' not found!"
                exit 1
            fi
        done

        source "${TMP_CONFIG}"

        echo "DOWNLOAD_URL_CHECKSUM=${DOWNLOAD_URL_CHECKSUM}" >> $GITHUB_OUTPUT
        echo "DOWNLOAD_URL_IMAGE=${DOWNLOAD_URL_IMAGE}" >> $GITHUB_OUTPUT

        IMG_FILE_NAME="$(basename "${DOWNLOAD_URL_IMAGE/.torrent/}")"
        echo "BASE_ZIP_IMG=\"${IMG_SRC_PATH}/${IMG_FILE_NAME}\"" | tee -a "${TMP_CONFIG}" >/dev/null

        while read -r vars; do
            printf "export %s\n" "${vars}" | tee -a "${TMP_CONFIG}" >/dev/null
        done < <(sed '/^#/d' "${TMP_CONFIG}" | cut -d"=" -f1)

        echo "::group::Move config file"
        mv -v "${TMP_CONFIG}" "${CONFIG_PATH}"
        echo "::endgroup::"

        echo "::group::Print config file"
        sed '/^export/d; /^#/d' "${CONFIG_PATH}" | sort
        echo "::endgroup::"

        echo "::endgroup::"

    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: "${{ github.workspace }}/repository/src"
        ignore_paths: "${{ github.workspace }}/repository/src/modules/**"
        additional_files: "config"

    - name: Base Image Checksum
      id: checksum
      shell: bash
      run: |
        cd repository/src/image
        FILENAME=$(basename ${{ steps.config.outputs.DOWNLOAD_URL_CHECKSUM }})
        wget -O ${FILENAME} ${{ steps.config.outputs.DOWNLOAD_URL_CHECKSUM }}
        FILE_CONTENT="$(head -n1 "${FILENAME}")"
        CHECKSUM="$(echo "${FILE_CONTENT}" | cut -d' ' -f1)"

        echo "CHECKSUM=${CHECKSUM}" >> $GITHUB_OUTPUT
        echo "FILENAME=${FILENAME}" >> $GITHUB_OUTPUT

    - name: Cache Base Source Image
      id: cache
      uses: actions/cache@v4
      with:
        path: repository/src/image/*.img.xz
        key: base-image-${{ steps.checksum.outputs.CHECKSUM }}

    - name: Download Base Source Image via Torrent
      if: steps.cache.outputs.cache-hit != 'true' && endswith(steps.config.outputs.DOWNLOAD_URL_IMAGE, '.torrent')
      shell: bash
      run: aria2c -d repository/src/image --seed-time=0 ${{ steps.config.outputs.DOWNLOAD_URL_IMAGE }}

    - name: Download Base Source Image via wget
      if: steps.cache.outputs.cache-hit != 'true' && !endswith(steps.config.outputs.DOWNLOAD_URL_IMAGE, '.torrent')
      shell: bash
      run: |
        cd repository/src/image
        wget ${{ steps.config.outputs.DOWNLOAD_URL_IMAGE }}

    - name: Comparing Checksums
      shell: bash
      run: |
        cd repository/src/image
        sha256sum -b ${{ steps.checksum.outputs.FILENAME }}

    - name: Update CustomPiOS Paths
      shell: bash
      run: cd repository/src && ../../CustomPiOS/src/update-custompios-paths

    - name: Build Image
      shell: bash
      run: |
        sudo modprobe loop && cd repository/src && sudo bash -x ./build_dist

    - name: Cleanup workspace & fix permissions
      if: success()
      shell: bash
      run: |
        # Clean up workspace
        path="${{ github.workspace }}/repository/src/workspace"
        sudo rm -rfv ${path}/aptcache
        sudo rm -rfv ${path}/mount
        sudo rm -rfv ${path}/chroot_script

        sudo chown -v -R ${USER}:${USER} ${path}
        sudo chmod 0775 -v -R ${path}
