name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: New version number in X.Y.Z
        required: true

jobs:
  push-version-number:
    name: Push version number
    runs-on: ubuntu-latest
    steps:
      - name: Clone develop repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PAT }}
          ref: 'develop'

      - name: Get current version
        id: current-version
        shell: bash
        run: |
          version=$(cat ./src/version)
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Push version number
        if: steps.current-version.outputs.version != github.event.inputs.version
        shell: bash
        run: |
          echo ${{ github.event.inputs.version }} > ./src/version

      - name: git add & commit & push
        if: steps.current-version.outputs.version != github.event.inputs.version
        uses: EndBug/add-and-commit@v9
        with:
          add: './src/version'
          default_author: github_actions
          message: 'chore: push version number to v${{ github.event.inputs.version }}'
          push: true

  update-master-branch:
    name: Update master branch
    needs: push-version-number
    runs-on: ubuntu-latest
    steps:
      - uses: everlytic/branch-merge@1.1.5
        with:
          github_token: ${{ secrets.PAT }}
          source_ref: 'develop'
          target_branch: 'master'
          commit_message_template: '[Automated] Merged {source_ref} into target {target_branch}'

  release:
    name: Create Release
    needs: update-master-branch
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create-release.outputs.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'master'

      - name: Get latest tag
        id: latest_tag
        shell: bash
        run: |
          echo "TAG_NAME=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: changelog
        with:
          config: ./cliff-release.toml
          args: ${{ steps.latest_tag.outputs.TAG_NAME }}..HEAD

      - name: Debug output changelog
        run: echo ${{ steps.changelog.outputs.content }}

      - name: Create empty release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: 'MainsailOS ${{ github.event.inputs.version }}'
          tag_name: ${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.content }}
          draft: true

  matrix:
    name: Create Matrix
    needs: release
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: master

      - name: Create Matrix
        id: set-matrix
        run: |
          ARRAY=$(find ${{ github.workspace }}/config -type f -printf '%P\n' | sed '/default/d' | sort | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=${ARRAY}" >> $GITHUB_OUTPUT

  build:
    needs: matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Build image
        id: build
        uses: mainsail-crew/MainsailOS-actions/dummy-image@master
        with:
          config: ${{ matrix.config }}

      - name: Copy output
        id: copy-image
        if: always()
        shell: bash
        run: |
          source repository/src/config
          NOW="$(date +"%Y-%m-%d")"
          IMAGE="${NOW}-${DIST_NAME}-${DIST_VERSION}-${{ steps.build.outputs.type }}-${{ steps.build.outputs.sbc }}"

          cp repository/src/workspace/*.img $IMAGE.img

          echo "image=${IMAGE}" >> $GITHUB_OUTPUT

      - name: Upload failed Logfile
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: failed-${{ steps.copy-image.outputs.image }}.log
          path: repository/src/build.log

      - name: Debug output
        run: echo ${{ steps.copy-image.outputs.image }}

#
#  release:
#    needs: ['update-master-branch']
#    runs-on: ubuntu-latest
#    steps:
#      - name: Fetch repo
#        uses: actions/checkout@v3
#        with:
#          ref: 'master'
#          fetch-depth: 0
#
#      - name: Install node
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Build
#        run: npm run build
#
#      - name: Move build out of dist
#        shell: bash
#        run: mv ./dist/mainsail.zip ./mainsail.zip
#
#      - name: Get latest tag
#        id: latest_tag
#        shell: bash
#        run: |
#          echo "TAG_NAME=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT
#
#      - name: Generate a changelog
#        uses: orhun/git-cliff-action@v1
#        id: generate-changelog
#        with:
#          config: ./cliff-release.toml
#          args: ${{ steps.latest_tag.outputs.TAG_NAME }}..HEAD
#
#      - name: Create release and upload build
#        uses: softprops/action-gh-release@v1
#        id: create-release
#        with:
#          name: v${{ github.event.inputs.version }}
#          tag_name: v${{ github.event.inputs.version }}
#          token: ${{ secrets.GITHUB_TOKEN }}
#          files: ./mainsail.zip
#          body: ${{ steps.generate-changelog.outputs.content }}
#
#      - name: Copy remote configs to dist
#        shell: bash
#        run: cp ./remote/* ./dist/
#
#      - name: Upload to remote server
#        uses: SamKirkland/FTP-Deploy-Action@4.3.3
#        with:
#          server: ${{ secrets.REMOTEHOST }}
#          username: ${{ secrets.REMOTEUSER }}
#          password: ${{ secrets.REMOTEPASSWORD }}
#          dangerous-clean-slate: true
#          local-dir: ./dist/
#
#  update-changelog:
#    needs: ['release']
#    name: Generate changelog
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          ref: 'develop'
#          token: ${{ secrets.PAT }}
#          fetch-depth: 0
#
#      - name: Get latest tag
#        id: latest_tag
#        shell: bash
#        run: |
#          echo "TAG_NAME=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_OUTPUT
#
#      - name: Generate a changelog
#        uses: orhun/git-cliff-action@v1
#        id: git-cliff
#        with:
#          config: cliff.toml
#          args: v0.0.4..${{ steps.latest_tag.outputs.TAG_NAME }}
#        env:
#          OUTPUT: ${{ github.workspace }}/CHANGELOG.md
#
#      - name: Show CHANGELOG
#        run: |
#          cat CHANGELOG.md
#      - uses: stefanzweifel/git-auto-commit-action@v4
#        with:
#          commit_message: 'docs(changelog): update changelog'
#          file_pattern: CHANGELOG.md
